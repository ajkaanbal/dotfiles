###############################################################################
#	Some snippets for T-SQL. For use with the snipmate plugin in Vim.
#
#	Install: Put this file in ~YourSnippetPath~/snippets
#
#	There is a mini grammar used by the snippets. It works similar to Vim with
#	things like dw=DELETE word.
#		Nouns: tab, col, fk, ind, sp, fn, vw, sel, tr, uk, wh, cur, lj, rh, ij,
#              fj, cj, ...
#		Verbs: (a)lter, (d)rop, (e)xists?ThenDelete
#			   CREATE is implicit, just type the noun
#		Use: CREATE column = col
#			 ALTER column = acol
#			 DROP column = dcol
#
#	License: Same as Vim. http://www.vim.org/
###############################################################################
# SELECT query.
snippet sel
	SELECT $2.*
	FROM ${1:/*Tab*/} ${2:/*Alias*/}
	WHERE ${3:0=0}
# CREATE table.
snippet tab
	CREATE TABLE dbo.${1:/*Tab*/} (
		ID bigint identity(1,1) not null,
		${2:/*cols*/}

		CONSTRAINT PK_$1 primary key clustered (ID asc)
	);
	GO${3}
# junction TABLE for many-to-many mapping. A sequential ID is used becuase
# sometimes the juntion is more than a mere implementaiton detail of a
# many-to-many. It may be an entity in its own right with extra fields and
# other tables referencing it via FK. Double unique keys are created for both
# directions of the mapping so you're covered no matter which field is used
# in a join.
snippet tabj
	CREATE TABLE dbo.${1:/*Tab*/} (
		ID bigint identity(1,1) not null,
		${2:ID_1} ${3:bigint} not null,
		${4:ID_2} ${5:bigint} not null,

		CONSTRAINT PK_$1 primary key clustered (ID asc)
	);
	GO
	ALTER TABLE $1 add constraint UK_$1_$2_$4 unique ($2, $4);
	ALTER TABLE $1 add constraint UK_$1_$4_$2 unique ($4, $2);
	ALTER TABLE $1 with check add constraint FK_$1_$2
		foreign key($2) references ${6:/*Tab1*/}(${7:/*ID_1*/});
	GO
	ALTER TABLE $1 check constraint FK_$1_$2;
	GO
	ALTER TABLE $1 with check add constraint FK_$1_$4
		foreign key($4) references ${8:/*Tab2*/}(${9:/*ID_2*/});
	GO
	ALTER TABLE $1 check constraint FK_$1_$4;
	GO${10}
# DROP table
snippet dtab
	DROP TABLE ${1:/*Tab*/};${2}
# truncate table. t as in (t)runcate
snippet ttab
	truncate TABLE ${1:/*Tab*/};${2}
# add column, when inside a create-TABLE statement.
snippet coll
	${1:/*Col*/} ${2:/*Type*/} not null ${3:default(/*val*/)},${4}
# add column
snippet col
	ALTER TABLE ${1:/*Tab*/} add ${2:/*Col*/} ${3:/*Type*/} not null default(${4:/*DefVal*/});${5}
# ALTER column
snippet acol
	ALTER TABLE ${1:/*Tab*/} ALTER column ${2:/*Col*/} ${3:/*Type*/} not null default(${4:/*DefVal*/});${5}
# DROP column
snippet dcol
	ALTER TABLE ${1:/*Tab*/} DROP column ${2:/*Col*/};${3}
# CREATE index
snippet ind
	CREATE index IX_$1_$2 on ${1:/*Tab*/}(${2:/*Col*/});${3}
# DROP index
snippet dind
	DROP index IX_$1_${2} on ${1:/*Tab*/};${3}
# foreign key
snippet fk
	ALTER TABLE ${1:/*FKtab*/} with check add constraint FK_$1_$3
		foreign key(${2:/*FKcol*/}) references ${3:/*UKtab*/}(${4:/*UKcol*/});
	GO
	ALTER TABLE $1 check constraint FK_$1_$3;
	GO${5}
# foreign key and index.
snippet fki
	ALTER TABLE ${1:/*FKtab*/} with check add constraint FK_$1_$3
		foreign key(${2:/*FKcol*/}) references ${3:/*UKtab*/}(${4:/*UKcol*/});
	GO
	ALTER TABLE $1 check constraint FK_$1_$3;
	GO
	CREATE index IX_$1_$2 on $1($2);
	GO${5}
# DROP foreign key
snippet dfk
	ALTER TABLE ${1:/*FKtab*/} DROP FK_$1_${2:/*UKtab*/};${3}
# check constraint
snippet ck
	ALTER TABLE ${1:/*Tab*/} add constraint CH_$1_${3:/*descr*/} check (${2:/*Conditions*/});${4}
# DROP check constraint
snippet dck
	ALTER TABLE ${1:/*Tab*/} DROP constraint CH_$1_${2};${3}
# unique key
snippet uk
	ALTER TABLE ${1:/*Tab*/} add constraint UK_$1_$2 unique (${2:/*Col*/});${3}
# DROP unique key
snippet duk
	ALTER TABLE ${1:/*Tab*/} DROP constraint UK_$1_${2};${3}
# stored proc
snippet sp
	SET ANSI_NULLS ON
	GO
	SET QUOTED_IDENTIFIER ON
	GO

	CREATE procedure dbo.${1:/*ProcName*/} (
		@${2:/*param1Name*/} ${3:/*type*/},
	)
	as

	${4:/*body*/}
	GO${5}
# DROP stored proc
snippet dsp
	DROP procedure ${1:/*ProcName*/};
	GO${2}
# ALTER proc is LEFT out so you don't accidentally erase your proc.
# function
snippet fn
	SET ANSI_NULLS ON
	GO
	SET QUOTED_IDENTIFIER ON
	GO

	CREATE function dbo.${1:/*FuncName*/} (
		@${3:/*param1Name*/} ${4:/*type*/}
	)
	RETURNS ${2:/*ReturnType*/}
	as

	${5:/*body*/}
	return /*val*/;
	GO
# DROP function
snippet dfn
	DROP function ${1:/*FuncName*/};${2}
# view
snippet vw
	CREATE view dbo.${1:/*ViewName*/}
	as

	${2:/*query*/}
	GO
# DROP view
snippet dvw
	DROP view ${1:/*ViewName*/};${2}
# trigger
snippet tr
	CREATE trigger ${1:/*TrigName*/} on dbo.${2:/*Tab*/} for ${3:/*insert, update, delete*/}
	as
	${4:/*body*/}
	GO
# trigger (experimental, doesn't work if on multiple actions)
snippet trr
	CREATE trigger tr_$1_$2 on dbo.${1:/*Tab*/} for ${2:/*insert, update, delete*/}
	as
	${3:/*body*/}
	GO
# DROP trigger
snippet dtr
	DROP trigger ${1:/*Trig*/};${2}
# exists? then DELETE trigger
snippet etr
	if exists(SELECT null FROM dbo.sysobjects WHERE name='${1:ObjName}' and OBJECTPROPERTY(id, 'IsTrigger') = 1)
	begin
		DROP trigger $1;
	end${2}
# while loop. NOTE: consider a set-based operation instead of a loop
snippet wh
	declare @i int = 0;
	while @i < ${1:@upper}
	begin
		${2:/*body*/}
		set @i=@i+1;
	end
# cursor. Assumes 1 fetch variable, since I don't understand snippets enough to
# have it fill up properly on multiple variables.
# NOTE: consider a set-based operation instead of a cursor
snippet cur
	declare @${1:fetchVar} ${2:type};
	declare ${3:cur} cursor for
		${4:/*query*/}
	open cur
	fetch next FROM $3 into @$1
	while @@fetch_status = 0
	begin
		${5:/*body*/}
		fetch next FROM $3 into @$1
	end
	close $3
	deallocate $3
# INNER join
snippet ij
	INNER JOIN ${1:/*Tab_A*/} ${2:Alias_A} on $2.${3:key_A}=${4:Tab_B}.${5:key_B}
# LEFT join
snippet lj
	LEFT JOIN ${1:/*Tab_A*/} ${2:Alias_A} on $2.${3:key_A}=${4:Tab_B}.${5:key_B}
# right join
snippet rj
	right JOIN ${1:/*Tab_A*/} ${2:Alias_A} on $2.${3:key_A}=${4:Tab_B}.${5:key_B}
# full OUTER join
snippet fj
	full OUTER JOIN ${1:/*Tab_A*/} ${2:Alias_A} on $2.${3:key_A}=${4:Tab_B}.${5:key_B}
# cross join
snippet cj
	cross JOIN ${1:Tab}
# insert
snippet ins simple insert
	INSERT into ${1:Tab}(${2:/*cols*/})
	values($2);
snippet inss INSERT with query
	INSERT into dbo.${1:InsTab} (${2:/*cols*/})
		${3:/*query*/}
snippet insDT INSERT data FROM Source to Dest. It will skip records that already exist based on "SomeKey"
	INSERT into ${1:Dest} (/*SomeKey, a, b, c*/)
		SELECT /*SomeKey, a, b, c*/
		FROM ${2:Source} ${3:s}
		LEFT JOIN $1 ${4:d} on $4.${5:SomeKey}=$3.${6:SomeKey}
		WHERE $4.$5 is null;
snippet up simple update
	UPDATE ${1:Tab} set
	${2:col}=@$2
	WHERE ${3:0=1};${4}
snippet ups UPDATE with a join
	UPDATE $2 set
		$2.foo = $5.bar
	FROM ${1:TargetTab} ${2:TargetAlias}
	${3:INNER join} ${4:Tab} ${5:Alias} on $5.${6:ID} = $2.${7:ID}
	WHERE ${8:0=1}
snippet upDT UPDATE data FROM Source to Dest based on "SomeKey". To avoid redundant updates when data is the same add a "where" clause.
	UPDATE $2 set
		$2.${7:col_1} = $4.${8}$7
	FROM ${1:Dest} ${2:d}
	INNER JOIN ${3:Source} ${4:s} on $4.${5:SomeKey} = $2.${6:SomeKey};
snippet del simple delete
	DELETE FROM ${1:Tab} WHERE ${2:0=1};${3}
snippet dels DELETE with join
	DELETE $2
	FROM ${1:TargetTab} ${2:TargetAlias}
	${3:INNER join} ${4:Tab} ${5:Alias} on $5.${6:ID} = $2.${7:ID}
	WHERE ${8:0=1}
snippet cte
	with ${1:CTE} as (
		${2:/*CTE query*/}
	)
	${3:/*query*/}
snippet cter recursive cte. Be careful!
	with ${1:CTE} as (
		SELECT t.${6:/*cols*/},
		t.$3, t.$5, 0 as depth
		FROM ${2:Tab} t
		WHERE t.${3:ParentID} ${4:is null}

		union all

		SELECT tt.$6,
		tt.$3, tt.$5, depth + 1
		FROM $2 tt
		INNER JOIN $1 cte on cte.${5:ID}=tt.$3
	)
	SELECT * FROM $1
snippet page pagination for sql server 2005-2008
	SELECT *
	FROM (
		SELECT row_number() over (order by ${2:/*Fields*/}) RowNum,
		${3:*}
		FROM ${1:/*Table*/}
		) as RowNumQuery
	WHERE RowNum between ${4:low} and ${5:high}
snippet pagecte pagination with CTE
	with ${1:RowNumQuery} as (
		SELECT row_number() over (order by ${3:/*Fields*/}) RowNum,
		${4:*}
		FROM ${2:/*Tab*/}
	)
	SELECT ${5:*}
	FROM $1
	WHERE RowNum between ${6:low} and ${7:high}
snippet page2 pagination for sql server 2012+
	declare @PageNum int = ${1:1};
	declare @PageSize int = ${2:20};
	declare @RowStart int = @PageNum * @PageSize - @PageSize;
	SELECT ${4:*}
	FROM ${3:/*Table*/}
	order by ${5:/*Fields*/}
	offset @RowStart rows fetch next @PageSize rows only;${6}
snippet flag type flags for reference purposes
	/* AF = Aggregate function (CLR)
	C = CHECK constraint
	D = DEFAULT (constraint or stand-alone)
	F = FOREIGN KEY constraint
	FN = SQL scalar function
	FS = Assembly (CLR) scalar-function
	FT = Assembly (CLR) table-valued function
	IF = SQL inline table-valued function
	IT = Internal table
	P = SQL Stored Procedure
	PC = Assembly (CLR) stored-procedure
	PG = Plan guide
	PK = PRIMARY KEY constraint
	R = Rule (old-style, stand-alone)
	RF = Replication-filter-procedure
	S = System base table
	SN = Synonym
	SO = Sequence object
	SQ = Service queue
	TA = Assembly (CLR) DML trigger
	TF = SQL table-valued-function
	TR = SQL DML trigger
	TT = TABLE type
	U = TABLE (user-defined)
	UQ = UNIQUE constraint
	V = View
	X = Extended stored procedure */
snippet e if exists
	if object_id('${1:ObjName}', '${2:TypeFlag}') is not null
		${3:/*HandleExistence*/};
snippet if if statement
	if(${1:0=0})
	begin
		${2};
	end
snippet el else
	else
	begin
		${1};
	end
snippet elif else-if
	else if(${1:0=0})
	begin
		${2};
	end
snippet ife if/else
	if(${1:0=0})
	begin
		${2};
	end
	else
	begin
		${3};
	end
#DELETE the call to raiserror if you want to swallow the exception.
#NOTE: as of this writing, a finally block is not supported by SQL Server so
#      you must duplicate any resource clean up
snippet try
	BEGIN TRY
		${1:/*body*/}
		/* free resources if applicable */
	END TRY
	BEGIN CATCH
		${2:/* handle, free resources, etc */}
		declare @Number int = ERROR_NUMBER();
		declare @Severity int = ERROR_SEVERITY();
		declare @State int = ERROR_STATE();
		declare @Procedure nvarchar(400) = ERROR_PROCEDURE();
		declare @Message nvarchar(4000) = ERROR_MESSAGE();
		${3:/* log error */}
		${4:raiserror(@Message, @Severity, @State);}
	END CATCH
snippet today this snippet is just to remember some syntax
	declare @today datetime = getdate();
	declare @todayStart datetime = convert(datetime, DATEDIFF(DAY, 0, @today));
	declare @todayEnd datetime =  dateadd(second, 86399, @todayStart);
snippet par this snippet is just to remember some partition syntax
	with Par as
	(
		SELECT t.a, t.b, t.c,
		ROW_NUMBER() over (partition by t.ParByField order by t.Test) as rn
		FROM SomeTABLE t
	)
	SELECT * FROM Par WHERE rn=1;
